#!/usr/bin/env bash

BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"
SSH_DIR="${HOME}/.ssh"

# Helper functions

alert() {
    echo "$1" | while IFS= read -r line; do
        echo "       !!!! $line"
    done
}

arrow() {
    echo "$1" | while IFS= read -r line; do
        echo ":::::> $line"
    done
}

read_env() {
    local env_file="$1"
    local env_file_path="${ENV_DIR}/${env_file}"
    
    if [[ "$env_file" == *"GITHUB"* ]] && [[ -f "$env_file_path" ]]; then
        alert "${env_file} is deprecated, please switch to ${env_file/GITHUB/GIT}"
    fi

    if [[ -f "$env_file_path" ]]; then
        cat "$env_file_path"
    fi
}

fetch_github_hash() {
    arrow "GIT_HOST_HASH not set, assuming github hash"
    
    # GitHub IP range and SSH key
    local github_base="github.com"
    local github_rsa_key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk="
    local github_ecdsa_key="ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg="
    local github_ed25519_key="sh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
    
    echo "${github_base} ${github_rsa_key}
${github_base} ${github_ecdsa_key}
${github_base} ${github_ed25519_key}"
}

arrow "############################################"
arrow "         GIT DEPLOY KEY BUILDPACK           "
arrow "############################################"

arrow "ssh dir is ${SSH_DIR}"

# Get deploy key from environment
ssh_key=$(read_env 'GIT_DEPLOY_KEY')
key_file_path="${ENV_DIR}/GIT_DEPLOY_KEY"

if [[ -z "$ssh_key" ]]; then
    ssh_key=$(read_env 'GITHUB_DEPLOY_KEY')
    key_file_path="${ENV_DIR}/GITHUB_DEPLOY_KEY"
fi

if [[ -z "$ssh_key" ]]; then
    alert "GIT_DEPLOY_KEY not set"
    alert "  Try \`heroku config:add GIT_DEPLOY_KEY=<your private token>\`"
    exit 1
fi

chmod 0600 "$key_file_path"

# Get host hash
host_hash=$(read_env 'GIT_HOST_HASH')
if [[ -z "$host_hash" ]]; then
    host_hash=$(read_env 'GITHUB_HOST_HASH')
fi
if [[ -z "$host_hash" ]]; then
    host_hash=$(fetch_github_hash)
fi

# Get git host
git_host=$(read_env 'GIT_HOST')
if [[ -z "$git_host" ]]; then
    arrow 'GIT_HOST not set, assuming github.com'
    git_host='github.com'
fi

# Get git user
git_user=$(read_env 'GIT_USER')
if [[ -z "$git_user" ]]; then
    arrow "GIT_USER not set, assuming 'git'"
    git_user='git'
fi

# Process and validate SSH key
temp_dir=$(mktemp -d)
trap 'rm -rf "$temp_dir"' EXIT

ssh-keygen -e -P '' -f "$key_file_path" < /dev/null > "${temp_dir}/ssh_buildpack_key.pub.rfc" 2>/dev/null
ssh-keygen -i -P '' -f "${temp_dir}/ssh_buildpack_key.pub.rfc" > "${temp_dir}/ssh_buildpack_key.pub" 2>/dev/null

# Get SSH version and generate fingerprint accordingly
ssh_version=$(ssh -V 2>&1 | grep -o 'OpenSSH_[0-9.]*' | cut -d_ -f2)
if [[ $(echo "$ssh_version" | cut -d. -f1) -ge 7 ]] || [[ "$ssh_version" == "6.9"* ]] || [[ "$ssh_version" == "6.8"* ]]; then
    fingerprint=$(ssh-keygen -l -E md5 -f "${temp_dir}/ssh_buildpack_key.pub" | awk '{print $2}')
else
    fingerprint=$(ssh-keygen -l -f "${temp_dir}/ssh_buildpack_key.pub" | awk '{print $2}')
fi

temp_key=$(echo "$fingerprint" | tr -d ':' | grep -iE '[a-f0-9]{32}')

if [[ -z "$temp_key" ]]; then
    alert "GIT_DEPLOY_KEY was invalid"
    exit 1
else
    arrow "Using GIT_DEPLOY_KEY ${fingerprint}"
fi

# Create SSH directory and files
mkdir -p "$SSH_DIR"
chmod 0700 "$SSH_DIR"

# Write private key
echo "$ssh_key" > "${SSH_DIR}/private_key"
chmod 0600 "${SSH_DIR}/private_key"
arrow "Wrote ssh key to user's ssh dir"

# Write known hosts
echo "$host_hash" > "${SSH_DIR}/known_hosts"
chmod 0600 "${SSH_DIR}/known_hosts"
arrow "Wrote host hash to user's known hosts"

# Write SSH config
cat > "${SSH_DIR}/config" << EOF
Host ${git_host}
     User ${git_user}
     IdentityFile ${SSH_DIR}/private_key
EOF
chmod 0600 "${SSH_DIR}/config"
arrow "Wrote config to user's config"
arrow "SSH CONFIG"
arrow "$(cat "${SSH_DIR}/config")"
